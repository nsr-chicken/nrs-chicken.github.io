{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import './banner.scss'\nimport React from \"react\";\nimport SimpleReactValidator from 'simple-react-validator';\nexport var ContactUs = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactUs, _React$Component);\n\n  var _super = _createSuper(ContactUs);\n\n  function ContactUs() {\n    var _this;\n\n    _classCallCheck(this, ContactUs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      email: {\n        name: '',\n        toId: '',\n        phone: '',\n        body: ''\n      },\n      isSendLoder: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (event) {\n      var target = event.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n\n      _this.setState({\n        productObj: _objectSpread(_objectSpread({}, _this.state.productObj), {}, _defineProperty({}, name, value))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendEmail\", function () {\n      var email = _this.state.email;\n\n      if (_this.validator.allValid()) {\n        _this.setState({\n          isSendLoder: true\n        });\n\n        _this.validator.hideMessages();\n\n        Email.send({\n          Host: \"smtp.gmail.com\",\n          Username: \"nsrchicken2020@gmail.com\",\n          Password: \"nsr2020@123\",\n          To: email.toId,\n          From: \"nsrchicken2020@gmail.com\",\n          Subject: \"Customer number\" + email.phone,\n          Body: email.Body\n        }).then(function (message) {\n          _this.setState({\n            isSendLoder: false\n          });\n        })[\"catch\"](function (error) {\n          _this.setState({\n            isSendLoder: false\n          });\n        });\n      } else {\n        _this.validator.showMessages();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ContactUs, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.validator = new SimpleReactValidator({\n        element: function element(message) {\n          return __jsx(\"span\", {\n            className: \"error-message text-danger validNo fs14\"\n          }, message);\n        },\n        autoForceUpdate: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          isSendLoder = _this$state.isSendLoder;\n      return (// <!-- Contact Section-->\n        __jsx(\"section\", {\n          className: \"page-section\",\n          id: \"contact\"\n        }, __jsx(\"div\", {\n          className: \"container\"\n        }, __jsx(\"h2\", {\n          className: \"page-section-heading text-center text-uppercase text-secondary mb-0\"\n        }, \"CONTACT US\"), __jsx(\"div\", {\n          className: \"divider-custom\"\n        }, __jsx(\"div\", {\n          className: \"divider-custom-line\"\n        }), __jsx(\"div\", {\n          className: \"divider-custom-icon\"\n        }, __jsx(\"i\", {\n          className: \"fas fa-star\"\n        })), __jsx(\"div\", {\n          className: \"divider-custom-line\"\n        })), __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"col-lg-8 mx-auto\"\n        }, __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          placeholder: \"Name\",\n          value: email.name,\n          name: \"name\",\n          onChange: this.handleInputChange\n        }), this.validator.message('Name', email.name, 'required'))), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Email Address\"), __jsx(\"input\", {\n          className: \"form-control\",\n          id: \"email\",\n          type: \"email\",\n          value: email.toId,\n          name: \"toId\",\n          onChange: this.handleInputChange,\n          placeholder: \"Email Address\",\n          required: \"required\"\n        }), this.validator.message('Email', email.toId, 'required|email'))), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Phone Number\"), __jsx(\"input\", {\n          className: \"form-control\",\n          id: \"phone\",\n          type: \"text\",\n          value: email.phone,\n          name: \"phone\",\n          onChange: this.handleInputChange,\n          placeholder: \"Phone Number\"\n        }), this.validator.message('Phone', email.phone, 'required'))), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Message\"), __jsx(\"textarea\", {\n          className: \"form-control\",\n          id: \"message\",\n          rows: \"5\",\n          placeholder: \"Message\",\n          value: email.body,\n          onChange: this.handleInputChange,\n          name: \"body\"\n        }), this.validator.message('body', email.body, 'required|max:3000'))), __jsx(\"br\", null), __jsx(\"div\", {\n          id: \"success\"\n        }), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"button\", {\n          className: \"btn btn-primary btn-xl\",\n          id: \"sendMessageButton\",\n          type: \"submit\"\n        }, isSendLoder ? __jsx(\"span\", {\n          className: \"spinner-border spinner-border-sm\",\n          role: \"status\",\n          \"aria-hidden\": \"true\"\n        }) : \"\", \" Send\"))))))\n      );\n    }\n  }]);\n\n  return ContactUs;\n}(React.Component);","map":{"version":3,"sources":["E:/projects/next/NRS (vivek)/component/pages/home/contact-us/index.js"],"names":["React","SimpleReactValidator","ContactUs","email","name","toId","phone","body","isSendLoder","event","target","value","type","checked","setState","productObj","state","validator","allValid","hideMessages","Email","send","Host","Username","Password","To","From","Subject","Body","then","message","error","showMessages","element","autoForceUpdate","handleInputChange","Component"],"mappings":"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","sourcesContent":["// import './banner.scss'\r\n\r\nimport React from \"react\";\r\nimport SimpleReactValidator from 'simple-react-validator';\r\n\r\nexport class ContactUs extends React.Component {\r\n    state = {\r\n        email: {\r\n            name: '',\r\n            toId: '',\r\n            phone: '',\r\n            body: ''\r\n\r\n        },\r\n        isSendLoder: false\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.validator = new SimpleReactValidator({\r\n            element: message => (\r\n                <span className=\"error-message text-danger validNo fs14\">{message}</span>\r\n            ),\r\n            autoForceUpdate: this,\r\n        });\r\n    }\r\n\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            productObj: {\r\n                ...this.state.productObj,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    sendEmail = () => {\r\n        let { email } = this.state;\r\n\r\n        if (this.validator.allValid()) {\r\n            this.setState({ isSendLoder: true })\r\n            this.validator.hideMessages();\r\n            Email.send({\r\n                Host: \"smtp.gmail.com\",\r\n                Username: \"nsrchicken2020@gmail.com\",\r\n                Password: \"nsr2020@123\",\r\n                To: email.toId,\r\n                From: \"nsrchicken2020@gmail.com\",\r\n                Subject: \"Customer number\" + email.phone,\r\n                Body: email.Body,\r\n            }).then((message) => {\r\n                this.setState({ isSendLoder: false })\r\n            }).catch((error) => { this.setState({ isSendLoder: false }) })\r\n        } else {\r\n            this.validator.showMessages();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let { email,isSendLoder } = this.state;\r\n\r\n        return (\r\n            // <!-- Contact Section-->\r\n            <section className=\"page-section\" id=\"contact\">\r\n                <div className=\"container\">\r\n                    {/* <!-- Contact Section Heading--> */}\r\n                    <h2 className=\"page-section-heading text-center text-uppercase text-secondary mb-0\">CONTACT US</h2>\r\n                    {/* <!-- Icon Divider--> */}\r\n                    <div className=\"divider-custom\">\r\n                        <div className=\"divider-custom-line\"></div>\r\n                        <div className=\"divider-custom-icon\"><i className=\"fas fa-star\"></i></div>\r\n                        <div className=\"divider-custom-line\"></div>\r\n                    </div>\r\n                    {/* <!-- Contact Section Form--> */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 mx-auto\">\r\n                            {/* <!-- To configure the contact form email address, go to mail/contact_me.php and update the email address in the PHP file on line 19.--> */}\r\n\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Name</label>\r\n                                    <input className=\"form-control\" type=\"text\" placeholder=\"Name\" value={email.name} name=\"name\" onChange={this.handleInputChange} />\r\n                                    {this.validator.message('Name', email.name, 'required')}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Email Address</label>\r\n                                    <input className=\"form-control\" id=\"email\" type=\"email\" value={email.toId} name=\"toId\" onChange={this.handleInputChange} placeholder=\"Email Address\" required=\"required\" />\r\n                                    {this.validator.message('Email', email.toId, 'required|email')}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Phone Number</label>\r\n                                    <input className=\"form-control\" id=\"phone\" type=\"text\" value={email.phone} name=\"phone\" onChange={this.handleInputChange} placeholder=\"Phone Number\" />\r\n                                    {this.validator.message('Phone', email.phone, 'required')}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Message</label>\r\n                                    <textarea className=\"form-control\" id=\"message\" rows=\"5\"\r\n                                        placeholder=\"Message\" value={email.body} onChange={this.handleInputChange} name=\"body\"\r\n                                    ></textarea>\r\n                                     {this.validator.message('body', email.body, 'required|max:3000')}\r\n\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                            <div id=\"success\"></div>\r\n                            <div className=\"form-group\"><button className=\"btn btn-primary btn-xl\" id=\"sendMessageButton\"\r\n                                type=\"submit\">{isSendLoder?<span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>:\"\"} Send</button></div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}