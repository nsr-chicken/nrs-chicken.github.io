{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import './banner.scss'\nimport React from \"react\";\nimport SimpleReactValidator from 'simple-react-validator';\nimport { Toast } from \"../../../../service/toast\";\nexport var ContactUs = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactUs, _React$Component);\n\n  var _super = _createSuper(ContactUs);\n\n  function ContactUs(props) {\n    var _this;\n\n    _classCallCheck(this, ContactUs);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (event) {\n      var target = event.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n\n      _this.setState({\n        email: _objectSpread(_objectSpread({}, _this.state.email), {}, _defineProperty({}, name, value))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sendEmail\", function () {\n      var email = _this.state.email;\n\n      if (_this.validator.allValid()) {\n        _this.setState({\n          isSendLoder: true\n        });\n\n        console.log(JSON.stringify(email), email.body);\n\n        _this.validator.hideMessages();\n\n        Email.send({\n          Host: \"smtp.gmail.com\",\n          Username: \"nsrchicken2020@gmail.com\",\n          Password: \"nsr2020@123\",\n          To: email.toId,\n          From: \"nsrchicken2020@gmail.com\",\n          Subject: \"Customer number: \" + email.phone,\n          Body: email.body\n        }).then(function (message) {\n          var email = {\n            name: '',\n            toId: '',\n            phone: '',\n            body: ''\n          };\n          Toast({\n            type: 'success',\n            message: 'mail sent successfully',\n            title: 'success'\n          });\n\n          _this.setState({\n            isSendLoder: false,\n            email: email\n          });\n        })[\"catch\"](function (error) {\n          Toast({\n            type: 'danger',\n            message: 'mail server error',\n            title: 'Error'\n          });\n\n          _this.setState({\n            isSendLoder: false\n          });\n        });\n      } else {\n        _this.validator.showMessages();\n      }\n    });\n\n    _this.state = {\n      email: {\n        name: '',\n        toId: '',\n        phone: '',\n        body: ''\n      },\n      isSendLoder: false\n    };\n    _this.validator = new SimpleReactValidator({\n      element: function element(message) {\n        return __jsx(\"span\", {\n          className: \"error-message text-danger validNo fs14\"\n        }, message);\n      },\n      autoForceUpdate: _assertThisInitialized(_this)\n    });\n    return _this;\n  } // componentDidMount() {\n  //     this.validator = new SimpleReactValidator({\n  //         element: message => (\n  //             <span className=\"error-message text-danger validNo fs14\">{message}</span>\n  //         ),\n  //         autoForceUpdate: this,\n  //     });\n  // }\n\n\n  _createClass(ContactUs, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          isSendLoder = _this$state.isSendLoder;\n      return (// <!-- Contact Section-->\n        __jsx(\"section\", {\n          className: \"page-section\",\n          id: \"contact\"\n        }, __jsx(\"div\", {\n          className: \"container\"\n        }, __jsx(\"h2\", {\n          className: \"page-section-heading text-center text-uppercase text-secondary mb-0\"\n        }, \"CONTACT US\"), __jsx(\"div\", {\n          className: \"divider-custom\"\n        }, __jsx(\"div\", {\n          className: \"divider-custom-line\"\n        }), __jsx(\"div\", {\n          className: \"divider-custom-icon\"\n        }, __jsx(\"i\", {\n          className: \"fas fa-star\"\n        })), __jsx(\"div\", {\n          className: \"divider-custom-line\"\n        })), __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"col-lg-8 mx-auto\"\n        }, __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          placeholder: \"Name\",\n          value: email.name,\n          name: \"name\",\n          onChange: this.handleInputChange\n        })), this.validator.message('Name', email.name, 'required|max:15')), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Email Address\"), __jsx(\"input\", {\n          className: \"form-control\",\n          id: \"email\",\n          type: \"email\",\n          value: email.toId,\n          name: \"toId\",\n          onChange: this.handleInputChange,\n          placeholder: \"Email Address\",\n          required: \"required\"\n        })), this.validator.message('Email', email.toId, 'required|email')), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Phone Number\"), __jsx(\"input\", {\n          className: \"form-control\",\n          id: \"phone\",\n          type: \"text\",\n          value: email.phone,\n          name: \"phone\",\n          onChange: this.handleInputChange,\n          placeholder: \"Phone Number\"\n        })), this.validator.message('Phone', email.phone, 'required')), __jsx(\"div\", {\n          className: \"control-group\"\n        }, __jsx(\"div\", {\n          className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n        }, __jsx(\"label\", null, \"Message\"), __jsx(\"textarea\", {\n          className: \"form-control\",\n          id: \"message\",\n          rows: \"5\",\n          placeholder: \"Message\",\n          value: email.body,\n          onChange: this.handleInputChange,\n          name: \"body\"\n        })), this.validator.message('body', email.body, 'required|max:3000')), __jsx(\"br\", null), __jsx(\"div\", {\n          id: \"success\"\n        }), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"button\", {\n          onClick: this.sendEmail,\n          className: \"btn btn-primary btn-xl\",\n          id: \"sendMessageButton\",\n          type: \"submit\"\n        }, isSendLoder ? __jsx(\"span\", {\n          className: \"spinner-border spinner-border-sm\",\n          role: \"status\",\n          \"aria-hidden\": \"true\"\n        }) : \"\", \" Send\"))))))\n      );\n    }\n  }]);\n\n  return ContactUs;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}