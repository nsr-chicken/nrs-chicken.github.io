{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import './banner.scss'\nimport React from \"react\";\nimport SimpleReactValidator from 'simple-react-validator';\nexport class ContactUs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleInputChange\", event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        email: _objectSpread(_objectSpread({}, this.state.email), {}, {\n          [name]: value\n        })\n      });\n    });\n\n    _defineProperty(this, \"sendEmail\", () => {\n      let {\n        email\n      } = this.state;\n\n      if (this.validator.allValid()) {\n        this.setState({\n          isSendLoder: true\n        });\n        this.validator.hideMessages();\n        Email.send({\n          Host: \"smtp.gmail.com\",\n          Username: \"nsrchicken2020@gmail.com\",\n          Password: \"nsr2020@123\",\n          To: email.toId,\n          From: \"nsrchicken2020@gmail.com\",\n          Subject: \"Customer number\" + email.phone,\n          Body: email.Body\n        }).then(message => {\n          let email = {\n            name: '',\n            toId: '',\n            phone: '',\n            body: ''\n          };\n          this.setState({\n            isSendLoder: false,\n            email\n          });\n        }).catch(error => {\n          this.setState({\n            isSendLoder: false\n          });\n        });\n      } else {\n        this.validator.showMessages();\n      }\n    });\n\n    this.state = {\n      email: {\n        name: '',\n        toId: '',\n        phone: '',\n        body: ''\n      },\n      isSendLoder: false\n    };\n    this.validator = new SimpleReactValidator({\n      element: message => __jsx(\"span\", {\n        className: \"error-message text-danger validNo fs14\"\n      }, message),\n      autoForceUpdate: this\n    });\n  } // componentDidMount() {\n  //     this.validator = new SimpleReactValidator({\n  //         element: message => (\n  //             <span className=\"error-message text-danger validNo fs14\">{message}</span>\n  //         ),\n  //         autoForceUpdate: this,\n  //     });\n  // }\n\n\n  render() {\n    let {\n      email,\n      isSendLoder\n    } = this.state;\n    return (// <!-- Contact Section-->\n      __jsx(\"section\", {\n        className: \"page-section\",\n        id: \"contact\"\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"h2\", {\n        className: \"page-section-heading text-center text-uppercase text-secondary mb-0\"\n      }, \"CONTACT US\"), __jsx(\"div\", {\n        className: \"divider-custom\"\n      }, __jsx(\"div\", {\n        className: \"divider-custom-line\"\n      }), __jsx(\"div\", {\n        className: \"divider-custom-icon\"\n      }, __jsx(\"i\", {\n        className: \"fas fa-star\"\n      })), __jsx(\"div\", {\n        className: \"divider-custom-line\"\n      })), __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-lg-8 mx-auto\"\n      }, __jsx(\"div\", {\n        className: \"control-group\"\n      }, __jsx(\"div\", {\n        className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n      }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        placeholder: \"Name\",\n        value: email.name,\n        name: \"name\",\n        onChange: this.handleInputChange\n      })), this.validator.message('Name', email.name, 'required|max:15')), __jsx(\"div\", {\n        className: \"control-group\"\n      }, __jsx(\"div\", {\n        className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n      }, __jsx(\"label\", null, \"Email Address\"), __jsx(\"input\", {\n        className: \"form-control\",\n        id: \"email\",\n        type: \"email\",\n        value: email.toId,\n        name: \"toId\",\n        onChange: this.handleInputChange,\n        placeholder: \"Email Address\",\n        required: \"required\"\n      })), this.validator.message('Email', email.toId, 'required|email')), __jsx(\"div\", {\n        className: \"control-group\"\n      }, __jsx(\"div\", {\n        className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n      }, __jsx(\"label\", null, \"Phone Number\"), __jsx(\"input\", {\n        className: \"form-control\",\n        id: \"phone\",\n        type: \"text\",\n        value: email.phone,\n        name: \"phone\",\n        onChange: this.handleInputChange,\n        placeholder: \"Phone Number\"\n      })), this.validator.message('Phone', email.phone, 'required')), __jsx(\"div\", {\n        className: \"control-group\"\n      }, __jsx(\"div\", {\n        className: \"form-group floating-label-form-group controls mb-0 pb-2\"\n      }, __jsx(\"label\", null, \"Message\"), __jsx(\"textarea\", {\n        className: \"form-control\",\n        id: \"message\",\n        rows: \"5\",\n        placeholder: \"Message\",\n        value: email.body,\n        onChange: this.handleInputChange,\n        name: \"body\"\n      })), this.validator.message('body', email.body, 'required|max:3000')), __jsx(\"br\", null), __jsx(\"div\", {\n        id: \"success\"\n      }), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"button\", {\n        onClick: this.sendEmail,\n        className: \"btn btn-primary btn-xl\",\n        id: \"sendMessageButton\",\n        type: \"submit\"\n      }, isSendLoder ? __jsx(\"span\", {\n        className: \"spinner-border spinner-border-sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }) : \"\", \" Send\"))))))\n    );\n  }\n\n}","map":{"version":3,"sources":["E:/projects/next/NRS (vivek)/component/pages/home/contact-us/index.js"],"names":["React","SimpleReactValidator","ContactUs","Component","constructor","props","event","target","value","type","checked","name","setState","email","state","validator","allValid","isSendLoder","hideMessages","Email","send","Host","Username","Password","To","toId","From","Subject","phone","Body","then","message","body","catch","error","showMessages","element","autoForceUpdate","render","handleInputChange","sendEmail"],"mappings":"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","sourcesContent":["// import './banner.scss'\r\n\r\nimport React from \"react\";\r\nimport SimpleReactValidator from 'simple-react-validator';\r\n\r\nexport class ContactUs extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: {\r\n                name: '',\r\n                toId: '',\r\n                phone: '',\r\n                body: ''\r\n    \r\n            },\r\n            isSendLoder: false\r\n    \r\n        }\r\n        this.validator = new SimpleReactValidator({\r\n            element: message => (\r\n                <span className=\"error-message text-danger validNo fs14\">{message}</span>\r\n            ),\r\n            autoForceUpdate: this,\r\n        });\r\n      }\r\n    \r\n\r\n\r\n    // componentDidMount() {\r\n    //     this.validator = new SimpleReactValidator({\r\n    //         element: message => (\r\n    //             <span className=\"error-message text-danger validNo fs14\">{message}</span>\r\n    //         ),\r\n    //         autoForceUpdate: this,\r\n    //     });\r\n\r\n    // }\r\n\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            email: {\r\n                ...this.state.email,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    sendEmail = () => {\r\n        let { email } = this.state;\r\n\r\n        if (this.validator.allValid()) {\r\n            this.setState({ isSendLoder: true })\r\n            this.validator.hideMessages();\r\n            Email.send({\r\n                Host: \"smtp.gmail.com\",\r\n                Username: \"nsrchicken2020@gmail.com\",\r\n                Password: \"nsr2020@123\",\r\n                To: email.toId,\r\n                From: \"nsrchicken2020@gmail.com\",\r\n                Subject: \"Customer number\" + email.phone,\r\n                Body: email.Body,\r\n            }).then((message) => {\r\n                let  email= {\r\n                    name: '',\r\n                    toId: '',\r\n                    phone: '',\r\n                    body: ''\r\n        \r\n                }\r\n                this.setState({ isSendLoder: false,email })\r\n            }).catch((error) => { \r\n             \r\n                this.setState({ isSendLoder: false }) })\r\n        } else {\r\n            this.validator.showMessages();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let { email, isSendLoder } = this.state;\r\n\r\n        return (\r\n            // <!-- Contact Section-->\r\n            <section className=\"page-section\" id=\"contact\">\r\n                <div className=\"container\">\r\n                    {/* <!-- Contact Section Heading--> */}\r\n                    <h2 className=\"page-section-heading text-center text-uppercase text-secondary mb-0\">CONTACT US</h2>\r\n                    {/* <!-- Icon Divider--> */}\r\n                    <div className=\"divider-custom\">\r\n                        <div className=\"divider-custom-line\"></div>\r\n                        <div className=\"divider-custom-icon\"><i className=\"fas fa-star\"></i></div>\r\n                        <div className=\"divider-custom-line\"></div>\r\n                    </div>\r\n                    {/* <!-- Contact Section Form--> */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 mx-auto\">\r\n                            {/* <!-- To configure the contact form email address, go to mail/contact_me.php and update the email address in the PHP file on line 19.--> */}\r\n\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Name</label>\r\n                                    <input className=\"form-control\" type=\"text\" placeholder=\"Name\" value={email.name} name=\"name\" onChange={this.handleInputChange} />\r\n                                                                   </div>\r\n                                {this.validator.message('Name', email.name, 'required|max:15')}\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Email Address</label>\r\n                                    <input className=\"form-control\" id=\"email\" type=\"email\" value={email.toId} name=\"toId\" onChange={this.handleInputChange} placeholder=\"Email Address\" required=\"required\" />\r\n                                                                 </div>\r\n                                {this.validator.message('Email', email.toId, 'required|email')}\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Phone Number</label>\r\n                                    <input className=\"form-control\" id=\"phone\" type=\"text\" value={email.phone} name=\"phone\" onChange={this.handleInputChange} placeholder=\"Phone Number\" />\r\n                                  \r\n                                </div>\r\n                                {this.validator.message('Phone', email.phone, 'required')}\r\n                            </div>\r\n                            <div className=\"control-group\">\r\n                                <div className=\"form-group floating-label-form-group controls mb-0 pb-2\">\r\n                                    <label>Message</label>\r\n                                    <textarea className=\"form-control\" id=\"message\" rows=\"5\"\r\n                                        placeholder=\"Message\" value={email.body} onChange={this.handleInputChange} name=\"body\"\r\n                                    ></textarea>\r\n                                   \r\n\r\n                                </div>\r\n                                {this.validator.message('body', email.body, 'required|max:3000')}\r\n                            </div>\r\n                            <br />\r\n                            <div id=\"success\"></div>\r\n                            <div className=\"form-group\"><button onClick={this.sendEmail} className=\"btn btn-primary btn-xl\" id=\"sendMessageButton\"\r\n                                type=\"submit\">{isSendLoder ? <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> : \"\"} Send</button></div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}